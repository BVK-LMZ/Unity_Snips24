using System.Collections;
using UnityEngine;

public class AdvancedPlayerController : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float runSpeedMultiplier = 1.5f;
    public float jumpForce = 10f;
    public int maxJumps = 2;
    public float jumpCooldown = 1.0f;

    private bool isGrounded;
    private bool isRunning;
    private int jumpsRemaining;
    private Rigidbody2D rb;

    private bool isJumpingCoroutineActive = false;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        HandleMovement();
        HandleJump();
    }

    void HandleMovement()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        Vector2 moveDirection = new Vector2(horizontalInput, 0);
        transform.Translate(moveDirection * moveSpeed * (isRunning ? runSpeedMultiplier : 1) * Time.deltaTime);

        if (moveDirection.x > 0)
            transform.localScale = new Vector3(1, 1, 1);
        else if (moveDirection.x < 0)
            transform.localScale = new Vector3(-1, 1, 1);
    }

    void HandleJump()
    {
        if (Input.GetButtonDown("Jump") && ( jumpsRemaining > 0) && !isJumpingCoroutineActive)
        {
           
            StartCoroutine(JumpCoroutine());
        }
    }

    IEnumerator JumpCoroutine()
    {
        isJumpingCoroutineActive = true;

        rb.velocity = new Vector2(rb.velocity.x, 0);
        rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);

        jumpsRemaining--; // Move this line outside the if statement

        yield return new WaitForSeconds(jumpCooldown);

        isJumpingCoroutineActive = false;
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            // reset all two jumps
            isGrounded = true;
            jumpsRemaining = maxJumps; 
        }
    }
}
